<Application x:Class="CarSalesSystem.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"

             StartupUri="/General/Windows/SignIn.xaml"

    xmlns:wpf="clr-namespace:MaterialDesignThemes.Wpf;assembly=MaterialDesignThemes.Wpf"
    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/ToastNotifications.Messages;component/Themes/Default.xaml" />
                <ResourceDictionary Source="/MainResource.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            
           <!--Menu Title-->
        <Style x:Key="menuTitle" TargetType="TextBlock">
            <Setter Property="Foreground" Value="#ffffff"></Setter>
            <Setter Property="FontSize" Value="20"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="Margin" Value="20 30 0 15"></Setter>
        </Style>
        
        <!--Menu Button-->
        <Style x:Key="menuButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent"></Setter>
            <Setter Property="Foreground" Value="White"></Setter>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
            <Setter Property="Height" Value="44"></Setter>
            <Setter Property="Margin" Value="15 0 15 5"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="8">
                            <ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Center"></ContentPresenter>
                        </Border>
                    </ControlTemplate>
                
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="#f7f6f4"/>
                        <Setter Property="Foreground" Value="#66b6d2"/>
                    </Trigger>
                <Trigger Property="IsFocused" Value="True">
                    <Setter Property="Background" Value="#f7f6f4"/>
                    <Setter Property="Foreground" Value="#66b6d2"/>
                </Trigger>

            </Style.Triggers>
            
        </Style>
        
        <!--Menu Button Icon-->
        <Style x:Key="menuButtonIcon" TargetType="materialDesign:PackIcon">
            <Setter Property="Margin" Value="4 0 0 0"/>
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Foreground" Value="{Binding Path=Foreground, 
                                          RelativeSource={RelativeSource FindAncestor,
                                          AncestorType={x:Type Button}}}">
                
            </Setter>
        </Style>

        <!--Menu Button Text-->
            <Style x:Key="menuButtonText" TargetType="TextBlock">
                <Setter Property="Margin" Value="16 2 0 0"/>
                <Setter Property="FontSize" Value="16"/>
                <Setter Property="FontFamily" Value="Nexa Bold"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>

                <Setter Property="Foreground" Value="{Binding Path=Foreground, 
                                          RelativeSource={RelativeSource FindAncestor,
                                          AncestorType={x:Type Button}}}">

                </Setter>
            </Style>
            <!--TextBox border style-->
            <!--<Style TargetType="{x:Type TextBox}">
                <Style.Resources>
                    <Style TargetType="{x:Type Border}">
                        <Setter Property="CornerRadius" Value="{DynamicResource ResourceKey=10}" />
                        <Setter Property="Padding" Value="10 0 0 0"/>
                    </Style>
                    <Style TargetType="{x:Type UserControl}">
                        <Setter Property="FontSize" Value="40"></Setter>
                    </Style>
                </Style.Resources>
            </Style>-->


            <!--Rounded button style-->
            <Style x:Key="RoundedButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="TextBlock.FontWeight" Value="Medium"/>
            <Setter Property="TextBlock.FontSize" Value="14"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="16 4 16 4"/>
            <Setter Property="Height" Value="32"/>
            <Setter Property="wpf:ElevationAssist.Elevation" Value="Dp2"/>
            <Setter Property="wpf:ButtonAssist.CornerRadius" Value="2"/>
            <Setter Property="wpf:RippleAssist.Feedback" Value="White"/>
            <Setter Property="wpf:ButtonProgressAssist.IndicatorForeground" Value="{DynamicResource PrimaryHueMidForegroundBrush}"/>
            <Setter Property="wpf:ButtonProgressAssist.IndicatorBackground" Value="{DynamicResource PrimaryHueMidBrush}"/>
            <Setter Property="wpf:ButtonProgressAssist.IsIndicatorVisible" Value="False"/>
            <Setter Property="wpf:ButtonProgressAssist.Opacity" Value=".4"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <AdornerDecorator CacheMode="{Binding (wpf:ShadowAssist.CacheMode), RelativeSource={RelativeSource Self}}">
                                <Grid>
                                    <Border Padding="10 0 0 0" x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="20" Effect="{Binding (wpf:ElevationAssist.Elevation), Converter={x:Static converters:ShadowConverter.Instance}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ProgressBar x:Name="ProgressBar" Background="{Binding (wpf:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" BorderBrush="{Binding (wpf:ButtonProgressAssist.IndicatorBackground), RelativeSource={RelativeSource TemplatedParent}}" Foreground="{Binding (wpf:ButtonProgressAssist.IndicatorForeground), RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="Left" Height="{TemplateBinding Height}" IsIndeterminate="{Binding (wpf:ButtonProgressAssist.IsIndeterminate), RelativeSource={RelativeSource TemplatedParent}}" Maximum="{Binding (wpf:ButtonProgressAssist.Maximum), RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding (wpf:ButtonProgressAssist.Minimum), RelativeSource={RelativeSource TemplatedParent}}" Opacity="{Binding (wpf:ButtonProgressAssist.Opacity), RelativeSource={RelativeSource TemplatedParent}}" Style="{DynamicResource MaterialDesignLinearProgressBar}" Value="{Binding (wpf:ButtonProgressAssist.Value), RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" Visibility="{Binding (wpf:ButtonProgressAssist.IsIndicatorVisible), Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" Width="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ButtonBase}}}">
                                        <ProgressBar.Clip>
                                            <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                                <Binding ElementName="border" Path="ActualWidth"/>
                                                <Binding ElementName="border" Path="ActualHeight"/>
                                                <Binding ElementName="border" Path="CornerRadius"/>
                                                <Binding ElementName="border" Path="BorderThickness"/>
                                            </MultiBinding>
                                        </ProgressBar.Clip>
                                    </ProgressBar>
                                </Grid>
                            </AdornerDecorator>
                            <wpf:Ripple ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" Focusable="False" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                <wpf:Ripple.Clip>
                                    <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                        <Binding ElementName="border" Path="ActualWidth"/>
                                        <Binding ElementName="border" Path="ActualHeight"/>
                                        <Binding ElementName="border" Path="CornerRadius"/>
                                        <Binding ElementName="border" Path="BorderThickness"/>
                                    </MultiBinding>
                                </wpf:Ripple.Clip>
                            </wpf:Ripple>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="wpf:ShadowAssist.Darken" TargetName="border" Value="True"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="wpf:ShadowAssist.Darken" TargetName="border" Value="True"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" Value="0.38"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
            <!--PasswordBox-->
            <Style TargetType="PasswordBox" x:Key="roundcornerpassword">
                <Setter Property="PasswordChar" Value="●"/>
                <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                <Setter Property="Padding" Value="10 0 0 0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="PasswordBox">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="1" OpacityMask="{x:Null}">
                                <ScrollViewer SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" x:Name="PART_ContentHost" Template="{DynamicResource ScrollViewerControlTemplate1}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--MessageBox Button-->
            <Style TargetType="Button" 
                x:Key="MessageBoxButtonStyle">
                <Setter Property="Background" 
                    Value="Transparent" />
                <Setter Property="TextBlock.TextAlignment" 
                    Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border  Name="Border" CornerRadius="10"  
                    BorderBrush="White" BorderThickness="5" 
                    Background="{TemplateBinding Background}">
                                <ContentPresenter x:Name="contentPresenter" 
                        ContentTemplate="{TemplateBinding ContentTemplate}" 
                        Content="{TemplateBinding Content}" 
                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                        Margin="{TemplateBinding Padding}" 
                        VerticalAlignment="{TemplateBinding VerticalAlignment}" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--Digit Code Trigger-->
            <Style x:Key="LayoutRoot" TargetType="Grid">
                <Style.Triggers>
                    <!--these are the triggers that make the code cursor jump from box 1 to box 2 to box 3.-->
                    <DataTrigger Binding="{Binding ElementName=CodeDigit1, Path=Text.Length}" Value="1">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit2}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit2, Path=Text.Length}" Value="1">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit3}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit3, Path=Text.Length}" Value="1">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit4}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit4, Path=Text.Length}" Value="1">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit5}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit5, Path=Text.Length}" Value="1">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=ConnectButton}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <!--Delete Digit Code Trigger-->
            <Style x:Key="DeleteBackward" TargetType="Grid">
                <Style.Triggers>
                    <!--these are the triggers that make the code cursor jump from box 1 to box 2 to box 3.-->
                    <DataTrigger Binding="{Binding ElementName=ConnectButton, Path=Text.Length}" Value="0">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit5}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit5, Path=Text.Length}" Value="0">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit4}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit4, Path=Text.Length}" Value="0">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit3}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit3, Path=Text.Length}" Value="0">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit2}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ElementName=CodeDigit2, Path=Text.Length}" Value="0">
                        <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=CodeDigit1}"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <!--Border-->
            <Style x:Key="WhiteBorder" TargetType="Border">
                <Setter Property="Background" Value="White"></Setter>
                <Setter Property="CornerRadius" Value="15"></Setter>
                <Setter Property="Padding" Value="20"></Setter>
            </Style>
         <!--Title text-->
            <Style x:Key="titleText" TargetType="TextBlock">
                <Setter Property="FontSize" Value="20"></Setter>
                <Setter Property="FontWeight" Value="Bold"></Setter>
                <Setter Property="Foreground" Value="#083353"></Setter>
            </Style>

         <!--Title text-->
            <Style x:Key="secondaryText" TargetType="TextBlock">
                <Setter Property="FontSize" Value="12"></Setter>
                <Setter Property="Margin" Value="0 5"></Setter>
                <Setter Property="Foreground" Value="#626262"></Setter>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
